//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(RegistrationApplicationv1.SchedulerApplication_v2Entities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets1f9efb0d5581d3f1bcb3463f9cec986498b5a44ffc3e72e36eecfea3dd4bb729))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets1f9efb0d5581d3f1bcb3463f9cec986498b5a44ffc3e72e36eecfea3dd4bb729 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "1f9efb0d5581d3f1bcb3463f9cec986498b5a44ffc3e72e36eecfea3dd4bb729"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "SchedulerApplication_v2ModelStoreContainer.Available")
            {
                return GetView0();
            }

            if (extentName == "SchedulerApplication_v2ModelStoreContainer.ClassTime")
            {
                return GetView1();
            }

            if (extentName == "SchedulerApplication_v2ModelStoreContainer.Courses")
            {
                return GetView2();
            }

            if (extentName == "SchedulerApplication_v2ModelStoreContainer.Professor")
            {
                return GetView3();
            }

            if (extentName == "SchedulerApplication_v2ModelStoreContainer.Student")
            {
                return GetView4();
            }

            if (extentName == "SchedulerApplication_v2ModelStoreContainer.CoursesTaught")
            {
                return GetView5();
            }

            if (extentName == "SchedulerApplication_v2ModelStoreContainer.CoursesEnrolled")
            {
                return GetView6();
            }

            if (extentName == "SchedulerApplication_v2Entities.Availables")
            {
                return GetView7();
            }

            if (extentName == "SchedulerApplication_v2Entities.ClassTimes")
            {
                return GetView8();
            }

            if (extentName == "SchedulerApplication_v2Entities.Courses")
            {
                return GetView9();
            }

            if (extentName == "SchedulerApplication_v2Entities.Professors")
            {
                return GetView10();
            }

            if (extentName == "SchedulerApplication_v2Entities.Students")
            {
                return GetView11();
            }

            if (extentName == "SchedulerApplication_v2Entities.CoursesTaughts")
            {
                return GetView12();
            }

            if (extentName == "SchedulerApplication_v2Entities.CoursesEnrolled")
            {
                return GetView13();
            }

            if (extentName == "SchedulerApplication_v2ModelStoreContainer.Registrar")
            {
                return GetView14();
            }

            if (extentName == "SchedulerApplication_v2Entities.Registrars")
            {
                return GetView15();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for SchedulerApplication_v2ModelStoreContainer.Available.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Available
        [SchedulerApplication_v2Model.Store.Available](T1.Available_CourseId, T1.Available_SeatsTaken, T1.Available_Capacity, T1.Available_Waitlist)
    FROM (
        SELECT 
            T.CourseId AS Available_CourseId, 
            T.SeatsTaken AS Available_SeatsTaken, 
            T.Capacity AS Available_Capacity, 
            T.Waitlist AS Available_Waitlist, 
            True AS _from0
        FROM SchedulerApplication_v2Entities.Availables AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchedulerApplication_v2ModelStoreContainer.ClassTime.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ClassTime
        [SchedulerApplication_v2Model.Store.ClassTime](T1.ClassTime_CourseId, T1.ClassTime_Time)
    FROM (
        SELECT 
            T.CourseId AS ClassTime_CourseId, 
            T.Time AS ClassTime_Time, 
            True AS _from0
        FROM SchedulerApplication_v2Entities.ClassTimes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchedulerApplication_v2ModelStoreContainer.Courses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Courses
        [SchedulerApplication_v2Model.Store.Courses](T1.Courses_CourseId, T1.Courses_CourseName, T1.Courses_Credits, T1.Courses_Description)
    FROM (
        SELECT 
            T.CourseId AS Courses_CourseId, 
            T.CourseName AS Courses_CourseName, 
            T.Credits AS Courses_Credits, 
            T.Description AS Courses_Description, 
            True AS _from0
        FROM SchedulerApplication_v2Entities.Courses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchedulerApplication_v2ModelStoreContainer.Professor.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Professor
        [SchedulerApplication_v2Model.Store.Professor](T1.Professor_ProfId, T1.Professor_Name)
    FROM (
        SELECT 
            T.ProfId AS Professor_ProfId, 
            T.Name AS Professor_Name, 
            True AS _from0
        FROM SchedulerApplication_v2Entities.Professors AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchedulerApplication_v2ModelStoreContainer.Student.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Student
        [SchedulerApplication_v2Model.Store.Student](T1.Student_StudentId, T1.Student_First, T1.Student_Last, T1.Student_Email, T1.Student_Phone, T1.Student_Major)
    FROM (
        SELECT 
            T.StudentId AS Student_StudentId, 
            T.First AS Student_First, 
            T.Last AS Student_Last, 
            T.Email AS Student_Email, 
            T.Phone AS Student_Phone, 
            T.Major AS Student_Major, 
            True AS _from0
        FROM SchedulerApplication_v2Entities.Students AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchedulerApplication_v2ModelStoreContainer.CoursesTaught.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CoursesTaught
        [SchedulerApplication_v2Model.Store.CoursesTaught](T1.CoursesTaught_ProfId, T1.CoursesTaught_CourseId)
    FROM (
        SELECT 
            T.ProfId AS CoursesTaught_ProfId, 
            T.CourseId AS CoursesTaught_CourseId, 
            True AS _from0
        FROM SchedulerApplication_v2Entities.CoursesTaughts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchedulerApplication_v2ModelStoreContainer.CoursesEnrolled.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CoursesEnrolled
        [SchedulerApplication_v2Model.Store.CoursesEnrolled](T1.CoursesEnrolled_StudentId, T1.CoursesEnrolled_CourseId)
    FROM (
        SELECT 
            Key(T.Student).StudentId AS CoursesEnrolled_StudentId, 
            Key(T.Courses).CourseId AS CoursesEnrolled_CourseId, 
            True AS _from0
        FROM SchedulerApplication_v2Entities.CoursesEnrolled AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchedulerApplication_v2Entities.Availables.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Availables
        [SchedulerApplication_v2Model.Available](T1.Available_CourseId, T1.Available_SeatsTaken, T1.Available_Capacity, T1.Available_Waitlist)
    FROM (
        SELECT 
            T.CourseId AS Available_CourseId, 
            T.SeatsTaken AS Available_SeatsTaken, 
            T.Capacity AS Available_Capacity, 
            T.Waitlist AS Available_Waitlist, 
            True AS _from0
        FROM SchedulerApplication_v2ModelStoreContainer.Available AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchedulerApplication_v2Entities.ClassTimes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ClassTimes
        [SchedulerApplication_v2Model.ClassTime](T1.ClassTime_CourseId, T1.ClassTime_Time)
    FROM (
        SELECT 
            T.CourseId AS ClassTime_CourseId, 
            T.Time AS ClassTime_Time, 
            True AS _from0
        FROM SchedulerApplication_v2ModelStoreContainer.ClassTime AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchedulerApplication_v2Entities.Courses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Courses
        [SchedulerApplication_v2Model.Cours](T1.Cours_CourseId, T1.Cours_CourseName, T1.Cours_Credits, T1.Cours_Description)
    FROM (
        SELECT 
            T.CourseId AS Cours_CourseId, 
            T.CourseName AS Cours_CourseName, 
            T.Credits AS Cours_Credits, 
            T.Description AS Cours_Description, 
            True AS _from0
        FROM SchedulerApplication_v2ModelStoreContainer.Courses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchedulerApplication_v2Entities.Professors.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Professors
        [SchedulerApplication_v2Model.Professor](T1.Professor_ProfId, T1.Professor_Name)
    FROM (
        SELECT 
            T.ProfId AS Professor_ProfId, 
            T.Name AS Professor_Name, 
            True AS _from0
        FROM SchedulerApplication_v2ModelStoreContainer.Professor AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchedulerApplication_v2Entities.Students.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Students
        [SchedulerApplication_v2Model.Student](T1.Student_StudentId, T1.Student_First, T1.Student_Last, T1.Student_Email, T1.Student_Phone, T1.Student_Major)
    FROM (
        SELECT 
            T.StudentId AS Student_StudentId, 
            T.First AS Student_First, 
            T.Last AS Student_Last, 
            T.Email AS Student_Email, 
            T.Phone AS Student_Phone, 
            T.Major AS Student_Major, 
            True AS _from0
        FROM SchedulerApplication_v2ModelStoreContainer.Student AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchedulerApplication_v2Entities.CoursesTaughts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CoursesTaughts
        [SchedulerApplication_v2Model.CoursesTaught](T1.CoursesTaught_ProfId, T1.CoursesTaught_CourseId)
    FROM (
        SELECT 
            T.ProfId AS CoursesTaught_ProfId, 
            T.CourseId AS CoursesTaught_CourseId, 
            True AS _from0
        FROM SchedulerApplication_v2ModelStoreContainer.CoursesTaught AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchedulerApplication_v2Entities.CoursesEnrolled.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CoursesEnrolled
        [SchedulerApplication_v2Model.CoursesEnrolled](T3.CoursesEnrolled_Courses, T3.CoursesEnrolled_Student)
    FROM (
        SELECT -- Constructing Courses
            CreateRef(SchedulerApplication_v2Entities.Courses, row(T2.CoursesEnrolled_Courses_CourseId), [SchedulerApplication_v2Model.Cours]) AS CoursesEnrolled_Courses, 
            T2.CoursesEnrolled_Student
        FROM (
            SELECT -- Constructing Student
                T1.CoursesEnrolled_Courses_CourseId, 
                CreateRef(SchedulerApplication_v2Entities.Students, row(T1.CoursesEnrolled_Student_StudentId), [SchedulerApplication_v2Model.Student]) AS CoursesEnrolled_Student
            FROM (
                SELECT 
                    T.CourseId AS CoursesEnrolled_Courses_CourseId, 
                    T.StudentId AS CoursesEnrolled_Student_StudentId, 
                    True AS _from0
                FROM SchedulerApplication_v2ModelStoreContainer.CoursesEnrolled AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for SchedulerApplication_v2ModelStoreContainer.Registrar.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Registrar
        [SchedulerApplication_v2Model.Store.Registrar](T1.Registrar_RegistrarId, T1.Registrar_Name)
    FROM (
        SELECT 
            T.RegistrarId AS Registrar_RegistrarId, 
            T.Name AS Registrar_Name, 
            True AS _from0
        FROM SchedulerApplication_v2Entities.Registrars AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchedulerApplication_v2Entities.Registrars.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Registrars
        [SchedulerApplication_v2Model.Registrar](T1.Registrar_RegistrarId, T1.Registrar_Name)
    FROM (
        SELECT 
            T.RegistrarId AS Registrar_RegistrarId, 
            T.Name AS Registrar_Name, 
            True AS _from0
        FROM SchedulerApplication_v2ModelStoreContainer.Registrar AS T
    ) AS T1");
        }
    }
}
